<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Discord.Addons.MpGame</name>
    </assembly>
    <members>
        <member name="T:Discord.Addons.MpGame.CircularLinkedList`1">
            <summary> Represents a circular doubly linked list. </summary>
            <typeparam name="T">Specifies the element type of the linked list.</typeparam>
            <remarks>This code copied from https://navaneethkn.wordpress.com/2009/08/18/circular-linked-list/ </remarks>
        </member>
        <member name="M:Discord.Addons.MpGame.CircularLinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary> Initializes a new instance of <see cref="T:Discord.Addons.MpGame.CircularLinkedList`1"/> </summary>
            <param name="collection">Collection of objects that will be added to linked list</param>
        </member>
        <member name="M:Discord.Addons.MpGame.CircularLinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary> Initializes a new instance of <see cref="T:Discord.Addons.MpGame.CircularLinkedList`1"/> </summary>
            <param name="collection">Collection of objects that will be added to linked list</param>
            <param name="comparer">Comparer used for item comparison</param>
        </member>
        <member name="P:Discord.Addons.MpGame.CircularLinkedList`1.Tail">
            <summary> Gets Tail node. Returns <see cref="!:null"/> if no tail node found </summary>
        </member>
        <member name="P:Discord.Addons.MpGame.CircularLinkedList`1.Head">
            <summary> Gets the head node. Returns <see cref="!:null"/> if no node found </summary>
        </member>
        <member name="P:Discord.Addons.MpGame.CircularLinkedList`1.Count">
            <summary> Gets total number of items in the list </summary>
        </member>
        <member name="P:Discord.Addons.MpGame.CircularLinkedList`1.Item(System.Int32)">
            <summary> Gets the item at the current index </summary>
            <param name="index">Zero-based index</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is out of range</exception>
        </member>
        <member name="M:Discord.Addons.MpGame.CircularLinkedList`1.AddLast(`0)">
            <summary> Add a new item to the end of the list </summary>
            <param name="item">Item to be added</param>
        </member>
        <member name="M:Discord.Addons.MpGame.CircularLinkedList`1.AddFirst(`0)">
            <summary> Adds item to the last </summary>
            <param name="item">Item to be added</param>
        </member>
        <member name="M:Discord.Addons.MpGame.CircularLinkedList`1.AddAfter(Discord.Addons.MpGame.Node{`0},`0)">
            <summary> Adds the specified item after the specified existing node in the list. </summary>
            <param name="node">Existing node after which new item will be inserted</param>
            <param name="item">New item to be inserted</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is NULL</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="node"/> doesn't belongs to list</exception>
        </member>
        <member name="M:Discord.Addons.MpGame.CircularLinkedList`1.AddAfter(`0,`0)">
            <summary> Adds the new item after the specified existing item in the list. </summary>
            <param name="existingItem">Existing item after which new item will be added</param>
            <param name="newItem">New item to be added to the list</param>
            <exception cref="T:System.ArgumentException"><paramref name="existingItem"/> doesn't exist in the list</exception>
        </member>
        <member name="M:Discord.Addons.MpGame.CircularLinkedList`1.AddBefore(Discord.Addons.MpGame.Node{`0},`0)">
            <summary> Adds the specified item before the specified existing node in the list. </summary>
            <param name="node">Existing node before which new item will be inserted</param>
            <param name="item">New item to be inserted</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is NULL</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="node"/> doesn't belongs to list</exception>
        </member>
        <member name="M:Discord.Addons.MpGame.CircularLinkedList`1.AddBefore(`0,`0)">
            <summary> Adds the new item before the specified existing item in the list. </summary>
            <param name="existingItem">Existing item before which new item will be added</param>
            <param name="newItem">New item to be added to the list</param>
            <exception cref="T:System.ArgumentException"><paramref name="existingItem"/> doesn't exist in the list</exception>
        </member>
        <member name="M:Discord.Addons.MpGame.CircularLinkedList`1.Find(`0)">
            <summary> Finds the supplied item and returns a node which contains item. Returns <see cref="!:null"/> if item not found </summary>
            <param name="item">Item to search</param>
            <returns><see cref="T:Discord.Addons.MpGame.Node`1"/> instance or <see cref="!:null"/></returns>
        </member>
        <member name="M:Discord.Addons.MpGame.CircularLinkedList`1.GetEnumerator">
            <summary> Gets a forward enumerator </summary>
            <returns></returns>
        </member>
        <member name="M:Discord.Addons.MpGame.CircularLinkedList`1.GetReverseEnumerator">
            <summary> Gets a reverse enumerator </summary>
            <returns></returns>
        </member>
        <member name="M:Discord.Addons.MpGame.CircularLinkedList`1.Contains(`0)">
            <summary> Determines whether a value is in the list. </summary>
            <param name="item">Item to check</param>
            <returns>TRUE if item exist, else FALSE</returns>
        </member>
        <member name="M:Discord.Addons.MpGame.CircularLinkedList`1.CopyTo(`0[],System.Int32)">
            <summary> </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="T:Discord.Addons.MpGame.Node`1">
            <summary> Represents a node </summary>
        </member>
        <member name="P:Discord.Addons.MpGame.Node`1.Value">
            <summary> Gets the Value </summary>
        </member>
        <member name="P:Discord.Addons.MpGame.Node`1.Next">
            <summary> Gets next node </summary>
        </member>
        <member name="P:Discord.Addons.MpGame.Node`1.Previous">
            <summary> Gets previous node </summary>
        </member>
        <member name="M:Discord.Addons.MpGame.Node`1.#ctor(`0)">
            <summary> Initializes a new <see cref="T:Discord.Addons.MpGame.Node`1"/> instance </summary>
            <param name="item">Value to be assigned</param>
        </member>
        <member name="T:Discord.Addons.MpGame.GameBase`1">
            <summary> Base class to represent a game between Discord users. </summary>
            <typeparam name="TPlayer">The type of this game's kind of <see cref="T:Discord.Addons.MpGame.Player"/> object.</typeparam>
        </member>
        <member name="P:Discord.Addons.MpGame.GameBase`1.Channel">
            <summary> The channel where the public-facing side of the game is played. </summary>
        </member>
        <member name="P:Discord.Addons.MpGame.GameBase`1.Players">
            <summary> Represents all the players in this game. </summary>
        </member>
        <member name="P:Discord.Addons.MpGame.GameBase`1.PlayerChannels">
            <summary> Selects the DM Channels of all the players. </summary>
        </member>
        <member name="P:Discord.Addons.MpGame.GameBase`1.TurnPlayer">
            <summary> The current turn's player. </summary>
        </member>
        <member name="M:Discord.Addons.MpGame.GameBase`1.#ctor(Discord.IMessageChannel,System.Collections.Generic.IEnumerable{`0})">
            <summary> Sets up the common logic for a multiplayer game. </summary>
        </member>
        <member name="M:Discord.Addons.MpGame.GameBase`1.SetupGame">
            <summary> Perform the actions that are part of the initial setup. </summary>
        </member>
        <member name="M:Discord.Addons.MpGame.GameBase`1.StartGame">
            <summary> Perform the one-time actions that happen at the start of the game. </summary>
        </member>
        <member name="M:Discord.Addons.MpGame.GameBase`1.NextTurn">
            <summary> Perform all actions that are part of starting a new turn. </summary>
        </member>
        <member name="M:Discord.Addons.MpGame.GameBase`1.EndGame(System.String)">
            <summary> Perform all actions that happen when the game ends
            (e.g.: a win condition is met, or the game is stopped early). </summary>
            <param name="endmsg">The message that should be displayed announcing
            the win condition or forced end of the game.</param>
        </member>
        <member name="M:Discord.Addons.MpGame.GameBase`1.GetGameState">
            <summary> Get a string that represent the state of the game. </summary>
        </member>
        <member name="T:Discord.Addons.MpGame.MpGameModuleBase`3">
            <summary> Base class to manage a game between Discord users. </summary>
            <typeparam name="TService">The type of the service managing longer lived objects.</typeparam>
            <typeparam name="TGame">The type of game to manage.</typeparam>
            <typeparam name="TPlayer">The type of the <see cref="T:Discord.Addons.MpGame.Player"/> object.</typeparam>
        </member>
        <member name="P:Discord.Addons.MpGame.MpGameModuleBase`3.Game">
            <summary> The instance of the game being played (if active). </summary>
        </member>
        <member name="P:Discord.Addons.MpGame.MpGameModuleBase`3.GameInProgress">
            <summary> Determines if a game in the current channel is in progress or not. </summary>
        </member>
        <member name="P:Discord.Addons.MpGame.MpGameModuleBase`3.GameService">
            <summary> The <see cref="!:TService"/> instance. </summary>
        </member>
        <member name="P:Discord.Addons.MpGame.MpGameModuleBase`3.OpenToJoin">
            <summary> Determines if a game in the current channel is open to join or not. </summary>
        </member>
        <member name="P:Discord.Addons.MpGame.MpGameModuleBase`3.PlayerList">
            <summary> The list of users ready to play. </summary>
        </member>
        <member name="M:Discord.Addons.MpGame.MpGameModuleBase`3.#ctor(`0)">
            <summary> Initializes the <see cref="T:Discord.Addons.MpGame.MpGameModuleBase`3"/> base class. </summary>
            <param name="gameService"></param>
        </member>
        <member name="M:Discord.Addons.MpGame.MpGameModuleBase`3.BeforeExecute">
            <summary> Initialize fields whose values come from the <see cref="!:TService"/>'s Dictionaries. </summary>
        </member>
        <member name="M:Discord.Addons.MpGame.MpGameModuleBase`3.OpenGameCmd">
            <summary> Command to open a game for others to join. </summary>
        </member>
        <member name="M:Discord.Addons.MpGame.MpGameModuleBase`3.CancelGameCmd">
            <summary> Command to cancel a game before it started. </summary>
        </member>
        <member name="M:Discord.Addons.MpGame.MpGameModuleBase`3.JoinGameCmd">
            <summary> Command to join a game that is open. </summary>
        </member>
        <member name="M:Discord.Addons.MpGame.MpGameModuleBase`3.LeaveGameCmd">
            <summary> Command to leave a game that is not yet started. </summary>
        </member>
        <member name="M:Discord.Addons.MpGame.MpGameModuleBase`3.StartGameCmd">
            <summary> Command to start a game with the players who joined. </summary>
        </member>
        <member name="M:Discord.Addons.MpGame.MpGameModuleBase`3.NextTurnCmd">
            <summary> Command to advance to the next turn (if applicable). </summary>
        </member>
        <member name="M:Discord.Addons.MpGame.MpGameModuleBase`3.GameStateCmd">
            <summary> Command to display the current state of the game. </summary>
        </member>
        <member name="M:Discord.Addons.MpGame.MpGameModuleBase`3.EndGameCmd">
            <summary> Command to end a game in progress early. </summary>
        </member>
        <member name="M:Discord.Addons.MpGame.MpGameModuleBase`3.ResendCmd">
            <summary> Command to resend a message to someone who had their DMs disabled. </summary>
        </member>
        <member name="T:Discord.Addons.MpGame.MpGameModuleBase`2">
            <summary> Base class to manage a game between Discord users,
            using the default <see cref="T:Discord.Addons.MpGame.MpGameService`2"/> type. </summary>
            <typeparam name="TGame">The type of game to manage.</typeparam>
            <typeparam name="TPlayer">The type of the <see cref="T:Discord.Addons.MpGame.Player"/> object.</typeparam>
        </member>
        <member name="T:Discord.Addons.MpGame.MpGameModuleBase`1">
            <summary> Base class to manage a game between Discord users,
            using the default <see cref="T:Discord.Addons.MpGame.MpGameService`2"/>
            and <see cref="T:Discord.Addons.MpGame.Player"/> types. </summary>
            <typeparam name="TGame">The type of game to manage.</typeparam>
        </member>
        <member name="T:Discord.Addons.MpGame.MpGameService`2">
            <summary> Service managing games for <see cref="!:MpGameModuleBase&lt;TService, TGame, TPlayer, TContext&gt;"/>. </summary>
            <typeparam name="TGame">The type of game to manage.</typeparam>
            <typeparam name="TPlayer">The type of the <see cref="T:Discord.Addons.MpGame.Player"/> object.</typeparam>
        </member>
        <member name="P:Discord.Addons.MpGame.MpGameService`2.UserComparer">
            <summary> A cached <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> instance to use when
            instantiating the <see cref="P:Discord.Addons.MpGame.MpGameService`2.PlayerList"/>'s <see cref="T:System.Collections.Generic.HashSet`1"/>. </summary>
        </member>
        <member name="P:Discord.Addons.MpGame.MpGameService`2.MessageChannelComparer">
            <summary> A cached <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> instance to use when
            instantiating a <see cref="T:System.Collections.Generic.Dictionary`2"/> using <see cref="T:Discord.IMessageChannel"/> as the key. </summary>
        </member>
        <member name="P:Discord.Addons.MpGame.MpGameService`2.GameList">
            <summary> The instance of a game being played, keyed by channel. </summary>
        </member>
        <member name="P:Discord.Addons.MpGame.MpGameService`2.PlayerList">
            <summary> The list of users scheduled to join game, keyed by channel. </summary>
        </member>
        <member name="P:Discord.Addons.MpGame.MpGameService`2.OpenToJoin">
            <summary> Indicates whether the users can join a game about to start, keyed by channel. </summary>
        </member>
        <member name="M:Discord.Addons.MpGame.MpGameService`2.OpenNewGame(Discord.IMessageChannel)">
            <summary> Prepare to set up a new game in a specified channel. </summary>
            <param name="channel">Public facing channel of this game.</param>
            <returns>true if the operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Discord.Addons.MpGame.MpGameService`2.AddUser(Discord.IMessageChannel,Discord.IUser)">
            <summary> Add a user to join an unstarted game. </summary>
            <param name="channel">Public facing channel of this game.</param>
            <param name="user">The user.</param>
            <returns>true if the operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Discord.Addons.MpGame.MpGameService`2.RemoveUser(Discord.IMessageChannel,Discord.IUser)">
            <summary> Remove a user from an unstarted game. </summary>
            <param name="channel">Public facing channel of this game.</param>
            <param name="user">The user.</param>
            <returns>true if the operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Discord.Addons.MpGame.MpGameService`2.TryAddNewGame(Discord.IMessageChannel,`0)">
            <summary> Add a new game to the list of active games. </summary>
            <param name="channel">Public facing channel of this game.</param>
            <param name="game">Instance of the game.</param>
            <returns>true if the operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Discord.Addons.MpGame.MpGameService`2.CancelGame(Discord.IMessageChannel)">
            <summary> Cancel a game that has not yet started. </summary>
            <param name="channel">Public facing channel of this game.</param>
            <returns>true if the operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Discord.Addons.MpGame.MpGameService`2.TryUpdateOpenToJoin(Discord.IMessageChannel,System.Boolean,System.Boolean)">
            <summary> Updates the flag indicating if a game can be joined or not. </summary>
            <param name="channel">The Channel ID.</param>
            <param name="newValue">The new value.</param>
            <param name="comparisonValue">The value that should be compared against.</param>
            <returns>true if the value was updated, otherwise false.</returns>
        </member>
        <member name="T:Discord.Addons.MpGame.Player">
            <summary> Represents a Discord user as a Player </summary>
        </member>
        <member name="P:Discord.Addons.MpGame.Player.User">
            <summary> The underlying <see cref="T:Discord.IUser"/> instance. </summary>
        </member>
        <member name="P:Discord.Addons.MpGame.Player.DmChannel">
            <summary> The user's DM Channel instance. </summary>
        </member>
        <member name="M:Discord.Addons.MpGame.Player.#ctor(Discord.IUser,Discord.IMessageChannel)">
            <summary> Creates a <see cref="T:Discord.Addons.MpGame.Player"/> out of an <see cref="T:Discord.IUser"/>. </summary>
            <param name="user">The user represented.</param>
            <param name="channel">The channel where this game is played.</param>
        </member>
        <member name="M:Discord.Addons.MpGame.Player.SendMessageAsync(System.String)">
            <summary> Sends a message to this <see cref="T:Discord.Addons.MpGame.Player"/>'s DM Channel
            and will cache the message if the user has DMs disabled. </summary>
            <param name="text">The text to send.</param>
        </member>
    </members>
</doc>
